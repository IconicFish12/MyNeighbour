generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum Types

enum UserRole {
  RESIDENT
  EMPLOYEE
}

enum EmployeeRole {
  ADMIN
  PROPERTY_MANAGER
  TECHNICIAN
  SECURITY
  NONE
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum ResidentStatus {
  HEAD_HOUSE_HOLD
  FAMILY_MEMBERS
}

enum UnitStatus {
  OCCUPIED
  VACANT
  MAINTENANCE
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  E_WALLET
  CREDIT_CARD
  CASH
}

// Enum untuk prioritas permintaan perbaikan
enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Enum untuk status permintaan perbaikan
enum MaintenanceStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum untuk status pemesanan fasilitas
enum BookingStatus {
  CONFIRMED
  CANCELLED
  PENDING
}

// Models

// createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamp()
//   updatedAt      DateTime    @updatedAt @map("updated_at") @db.Timestamp()

model User {
  id                     String    @id @default(uuid()) @db.Uuid
  fullName               String    @map("nama_lengkap")
  firstName              String    @map("nama_depan")
  lastName               String    @map("nama_belakang")
  dateOfBirth            DateTime? @map("tanggal_lahir")
  contactNumber          String?   @map("nomor_kontak")
  primaryEmail           String    @unique @map("email_utama")
  secondaryEmail         String?   @unique @map("email_kedua")
  passwordHash           String    @unique @map("password_terenkripsi")
  sessionToken           String?   @unique
  emailVerificationToken String?   @unique
  passwordResetToken     String?   @unique
  role                   UserRole
  gender                 Gender    @default(NONE)
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt              DateTime  @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  resident  Resident[]
  payments  Payment[]
  Employees Employees[]

  @@map("tb_pengguna")
}

model Resident {
  residentId             String         @id @default(uuid()) @map("resident_id") @db.Uuid
  user                   User           @relation(fields: [residentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  emergencyContactName   String?        @map("nama_kontak_darurat")
  emergencyContactNumber String?        @map("nomor_kontak_darurat")
  movedInDate            DateTime       @map("tanggal_masuk")
  movedOutDate           DateTime?      @map("tanggal_keluar")
  residentStatus         ResidentStatus @default(FAMILY_MEMBERS)
  unitId                 String         @map("unit_id") @db.Uuid
  unit                   Unit           @relation(fields: [unitId], references: [id])
  createdAt              DateTime       @default(now()) @map("created_at") @db.Timestamp()
  updatedAt              DateTime       @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  maintenanceRequests MaintenanceRequest[]
  payments            Payment[]
  Lease               Lease[]

  @@map("tb_penghuni")
}

model Employees {
  employeeId       String       @id @default(uuid()) @map("employee_id") @db.Uuid
  user             User         @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeIdNumber String       @unique @map("nomor_pegawai")
  hireDate         DateTime     @map("tanggal_perekrutan")
  employeePosition EmployeeRole @default(NONE) @map("posisi_pegawai")
  workingHours     Int          @map("jam_kerja_pegawai")
  salary           Float        @map("gaji_pegawai")
  bonus            Float        @map("bonus_pegawai")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime     @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  Announcement       Announcement[]
  MaintenanceRequest MaintenanceRequest[]

  @@map("tb_pegawai")
}

model MaintenanceRequest {
  id          String              @id @default(uuid()) @db.Uuid
  title       String              @map("nama_permintaan")
  description String              @map("deskripsi_pemintaan")
  requestDate DateTime            @default(now())
  priority    MaintenancePriority
  status      MaintenanceStatus

  // Relasi
  residentId       String     @db.Uuid
  resident         Resident   @relation(fields: [residentId], references: [residentId])
  unitId           String     @db.Uuid
  unit             Unit       @relation(fields: [unitId], references: [id])
  assignedToUserId String?    @db.Uuid
  assignedTo       Employees? @relation(fields: [assignedToUserId], references: [employeeId])

  @@map("tb_permintaan_pemeliharaan")
}

model Complaint {
  iid String @id @default(uuid()) @db.Uuid
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  amount        Float         @map("jumlah_pembayaran")
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod @map("metode_pembayaran")
  status        PaymentStatus @map("status_pembayaran")
  paymentFor    String        @map("tujuan_pembayaram")
  description   String?

  // Relasi
  residentId        String   @db.Uuid
  resident          Resident @relation(fields: [residentId], references: [residentId])
  unitId            String?  @db.Uuid
  unit              Unit?    @relation(fields: [unitId], references: [id])
  leaseId           String?  @db.Uuid
  lease             Lease?   @relation(fields: [leaseId], references: [id])
  processedByUserId String?  @db.Uuid
  processedBy       User?    @relation(fields: [processedByUserId], references: [id])
}

model Announcement {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  content     String
  publishDate DateTime  @default(now())
  expiryDate  DateTime?
  audience    String? // e.g., 'all residents', 'building A'

  // Relasi
  authorId String    @db.Uuid
  author   Employees @relation(fields: [authorId], references: [employeeId])
}

model Unit {
  id                String     @id @default(uuid()) @db.Uuid
  unitNumber        String     @unique
  buildingName      String?
  floorNumber       Int?
  numberOfBedrooms  Int?
  numberOfBathrooms Int?
  squareFootage     Int?
  rentAmount        Float?
  status            UnitStatus

  // Relasi
  residents           Resident[]
  maintenanceRequests MaintenanceRequest[]
  payments            Payment[]
  leases              Lease[]
}

model Lease {
  id                 String   @id @default(uuid()) @db.Uuid
  startDate          DateTime
  endDate            DateTime
  monthlyRent        Float
  depositAmount      Float?
  termsAndConditions String?

  // Relasi
  residentId String    @db.Uuid
  resident   Resident? @relation(fields: [residentId], references: [residentId])
  unitId     String    @unique @db.Uuid
  unit       Unit      @relation(fields: [unitId], references: [id])
  payments   Payment[]
}

model Contact {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  role        String // e.g., 'Emergency Services', 'Property Manager', 'Security'
  phoneNumber String
  email       String?
}
